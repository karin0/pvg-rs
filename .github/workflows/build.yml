name: Build
on: [push]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  build:
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - aarch64-linux-android
          - x86_64-pc-windows-msvc
    env:
      RUST_BACKTRACE: full
      RUSTFLAGS: ${{ contains(matrix.target, 'msvc') && '-C target-feature=+crt-static' || '' }}
    runs-on: ${{ contains(matrix.target, 'msvc') && 'windows-latest' || 'ubuntu-latest' }}
    steps:
      - name: Cleanup pre-installed tools
        if: runner.os != 'Windows'
        run: |
          # This is a fix for https://github.com/actions/virtual-environments/issues/1918
          shopt -s nullglob
          sudo rm -rf /usr/share/{dotnet,swift,az*,gradle*,*conda} \
            /opt/{ghc,az} \
            /usr/local/share/boost /usr/local/graalvm /usr/local/julia* "$AGENT_TOOLSDIRECTORY"

      - uses: actions/checkout@v2

      - name: Use GNU tar for cache
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo "Adding GNU tar to PATH"
          echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true

      - run: cargo install cross --git https://github.com/cross-rs/cross
        continue-on-error: true
        if: matrix.target != 'x86_64-unknown-linux-gnu' && runner.os != 'Windows'

      - name: Build ${{ matrix.target }}
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -e
          cargo update
          target=${{ matrix.target }}
          flags=--release
          if [[ $target != *linux-gnu ]]; then
            flags+=' --no-default-features'
          fi
          if [ $target = x86_64-unknown-linux-gnu ]; then
            cargo=cargo
          else
            cargo=cross
            flags+=" --target $target"
          fi
          $cargo build $flags
          bin=target/$target/release/pvg
          if ! [ -f $bin ]; then
            bin+=.exe
            if ! [ -f $bin ]; then
              bin=target/release/pvg
            fi
          fi
          FILE=pvg-${GITHUB_SHA::7}-$target.xz
          echo "FILE=$FILE" >> $GITHUB_ENV
          xz -cv $bin > $FILE

      - uses: msys2/setup-msys2@v2
        if: runner.os == 'Windows'
        with:
          path-type: inherit

      - name: Build ${{ matrix.target }} in MSYS2
        shell: msys2 {0}
        if: runner.os == 'Windows'
        run: |
          set -e
          cargo update
          cargo build --release --no-default-features
          FILE=pvg-${GITHUB_SHA::7}-$target.xz
          echo "FILE=$FILE" >> $GITHUB_ENV
          xz -cv target/release/pvg.exe > $FILE

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.FILE }}
          path: ${{ env.FILE }}
